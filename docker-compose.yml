version: "3"

#dbとbackendのコンテナを作成
services:
  db:
    container_name: db
    #DockerHubにアップされているイメージをプル
    image: mysql:5.7.30
    #環境変数設定
    environment: 
      TZ: Asia/Tokyo #Dockerfileと同様にTimeZoneを設定
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: password
    #マウントする設定ファイルのパスを指定
    volumes:
      - mysql_data:/var/lib/mysql
    #ポートを設定
    ports:
      - 3316:3306
    #IPアドレスを設定
    networks:
      app_net: #後述のapp_netネットワーク空間の以下のIPを使用するよう設定
        ipv4_address: '172.20.0.2'

  backend:
    container_name: backend
    #ComposeFileを実行し、ビルドされるときのpathを指定
    build: ./backend/
    image: backend
    #gemを動かしてサーバー立ち上げし、0.0.0.0にバインドしてフルアクセスできるようにする
    command: bundle exec rails server -b 0.0.0.0
    #コンテナの常時起動
    tty: true
    #入力のインターフェースを起動 docker run -itのitと同義
    stdin_open: true
    
    #バックエンドはcashe, temp, log, gitにもマウント
    volumes:
      - ./backend:/app:cached
      - bundle_data:/usr/local/bundle:cached
      - /app/vendor
      - /app/tmp
      - /app/log
      - /app/.git
    environment:
      TZ: Asia/Tokyo
    
    #起動順を制御, dbの後
    depends_on:
      - db
    ports:
      - 5000:3000 # ポートフォワード
    networks:
      app_net:
        ipv4_address: '172.20.0.3'


  frontend:
    container_name: frontend
    build: ./frontend/
    image: frontend
    volumes:
      - ./frontend:/app
    #localhostの3000から3000にアクセスポート設定
    ports:
      - 8080:3000
    command: "npm run dev"
    networks:
      app_net:
        ipv4_address: '172.20.0.4'


#独自のネットワークを設定
networks:
  #app_netというネットワーク空間を定義
  app_net:
    driver: bridge #bridgeネットワークへ接続
    ipam: #IP設定
      driver: default
      config:
        - subnet: 172.20.0.0/24 #Subnetを定義

#2つのvolumeを定義
volumes:
  mysql_data:
  bundle_data:
